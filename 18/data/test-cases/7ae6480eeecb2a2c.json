{
  "uid" : "7ae6480eeecb2a2c",
  "name" : "test_add_del_article",
  "fullName" : "exam_masterpiece.test_ts3_add_del_article#test_add_del_article",
  "historyId" : "145895ccc65e6410f1f2ed102c32cc17",
  "time" : {
    "start" : 1627280921610,
    "stop" : 1627280939564,
    "duration" : 17954
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"#/login\" class=\"nav-link router-link-exact-active active\" aria-current=\"page\">...</a> is not clickable at point (637, 26). Other element would receive the click: <div class=\"swal-overlay swal-overlay--show-modal\" tabindex=\"-1\">...</div>\n  (Session info: headless chrome=91.0.4472.164)",
  "statusTrace" : "def test_add_del_article():\n        from selenium import webdriver\n        from selenium.webdriver.chrome.options import Options\n        from webdriver_manager.chrome import ChromeDriverManager\n        from selenium.common.exceptions import NoSuchElementException\n        import time\n    \n        options = Options()\n        options.add_argument('--headless')\n        options.add_argument('--disable-gpu')\n        driver = webdriver.Chrome(ChromeDriverManager().install(), chrome_options=options)\n    \n        try:\n            driver.get(\"http://localhost:1667/\")\n            time.sleep(10)\n    \n            # Sign in:\n            login = driver.find_element_by_xpath('//*[@id=\"app\"]/nav/div/ul/li[2]/a')\n            time.sleep(2)\n            login.click()\n    \n            # Fill input fields:\n            def fill_login(mail, pw):\n                email = driver.find_element_by_xpath('//*[@id=\"app\"]//fieldset[1]/input')\n                password = driver.find_element_by_xpath('//*[@id=\"app\"]//fieldset[2]/input')\n                button = driver.find_element_by_xpath('//*[@id=\"app\"]//form/button')\n    \n                email.send_keys(mail)\n                password.send_keys(pw)\n                button.click()\n    \n            username = \"kiskakas1\"\n            fill_login(\"kiskakas1@gmail.com\", \"Kiskakas1$\")\n    \n            time.sleep(4)\n    \n>           new_article = driver.find_element_by_xpath('//*[@id=\"app\"]/nav/div/ul/li[2]/a').click()\n\nexam_masterpiece/test_ts3_add_del_article.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa22d9c7a90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\u003C/div>\\\\n  (Session info: headless chrome=91.0.4472.164)\",\"stacktrace\":\"#0 0x5641ab8e2949 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"#/login\" class=\"nav-link router-link-exact-active active\" aria-current=\"page\">...</a> is not clickable at point (637, 26). Other element would receive the click: <div class=\"swal-overlay swal-overlay--show-modal\" tabindex=\"-1\">...</div>\nE         (Session info: headless chrome=91.0.4472.164)\n\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:242: ElementClickInterceptedException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"#/login\" class=\"nav-link router-link-exact-active active\" aria-current=\"page\">...</a> is not clickable at point (637, 26). Other element would receive the click: <div class=\"swal-overlay swal-overlay--show-modal\" tabindex=\"-1\">...</div>\n  (Session info: headless chrome=91.0.4472.164)",
    "statusTrace" : "def test_add_del_article():\n        from selenium import webdriver\n        from selenium.webdriver.chrome.options import Options\n        from webdriver_manager.chrome import ChromeDriverManager\n        from selenium.common.exceptions import NoSuchElementException\n        import time\n    \n        options = Options()\n        options.add_argument('--headless')\n        options.add_argument('--disable-gpu')\n        driver = webdriver.Chrome(ChromeDriverManager().install(), chrome_options=options)\n    \n        try:\n            driver.get(\"http://localhost:1667/\")\n            time.sleep(10)\n    \n            # Sign in:\n            login = driver.find_element_by_xpath('//*[@id=\"app\"]/nav/div/ul/li[2]/a')\n            time.sleep(2)\n            login.click()\n    \n            # Fill input fields:\n            def fill_login(mail, pw):\n                email = driver.find_element_by_xpath('//*[@id=\"app\"]//fieldset[1]/input')\n                password = driver.find_element_by_xpath('//*[@id=\"app\"]//fieldset[2]/input')\n                button = driver.find_element_by_xpath('//*[@id=\"app\"]//form/button')\n    \n                email.send_keys(mail)\n                password.send_keys(pw)\n                button.click()\n    \n            username = \"kiskakas1\"\n            fill_login(\"kiskakas1@gmail.com\", \"Kiskakas1$\")\n    \n            time.sleep(4)\n    \n>           new_article = driver.find_element_by_xpath('//*[@id=\"app\"]/nav/div/ul/li[2]/a').click()\n\nexam_masterpiece/test_ts3_add_del_article.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa22d9c7a90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\u003C/div>\\\\n  (Session info: headless chrome=91.0.4472.164)\",\"stacktrace\":\"#0 0x5641ab8e2949 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"#/login\" class=\"nav-link router-link-exact-active active\" aria-current=\"page\">...</a> is not clickable at point (637, 26). Other element would receive the click: <div class=\"swal-overlay swal-overlay--show-modal\" tabindex=\"-1\">...</div>\nE         (Session info: headless chrome=91.0.4472.164)\n\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:242: ElementClickInterceptedException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "8ac68af0eefd6700",
      "name" : "log",
      "source" : "8ac68af0eefd6700.txt",
      "type" : "text/plain",
      "size" : 344
    }, {
      "uid" : "d39d35ed70744115",
      "name" : "stderr",
      "source" : "d39d35ed70744115.txt",
      "type" : "text/plain",
      "size" : 215
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "exam_masterpiece"
  }, {
    "name" : "suite",
    "value" : "test_ts3_add_del_article"
  }, {
    "name" : "host",
    "value" : "fv-az81-15"
  }, {
    "name" : "thread",
    "value" : "3748-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "exam_masterpiece.test_ts3_add_del_article"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 15,
        "skipped" : 0,
        "passed" : 7,
        "unknown" : 0,
        "total" : 22
      },
      "items" : [ {
        "uid" : "cb3d1a464426d05d",
        "reportUrl" : "https://sirokeszter.github.io/conduit/17//#testresult/cb3d1a464426d05d",
        "status" : "passed",
        "time" : {
          "start" : 1627280170908,
          "stop" : 1627280207443,
          "duration" : 36535
        }
      }, {
        "uid" : "8a7201c0ad556962",
        "reportUrl" : "https://sirokeszter.github.io/conduit/17//#testresult/8a7201c0ad556962",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"#/login\" class=\"nav-link router-link-exact-active active\" aria-current=\"page\">...</a> is not clickable at point (637, 26). Other element would receive the click: <div class=\"swal-overlay swal-overlay--show-modal\" tabindex=\"-1\">...</div>\n  (Session info: headless chrome=91.0.4472.164)",
        "time" : {
          "start" : 1627251382817,
          "stop" : 1627251401819,
          "duration" : 19002
        }
      }, {
        "uid" : "80c6faf846e92d04",
        "reportUrl" : "https://sirokeszter.github.io/conduit/16//#testresult/80c6faf846e92d04",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"#/login\" class=\"nav-link router-link-exact-active active\" aria-current=\"page\">...</a> is not clickable at point (637, 26). Other element would receive the click: <div class=\"swal-overlay swal-overlay--show-modal\" tabindex=\"-1\">...</div>\n  (Session info: headless chrome=91.0.4472.164)",
        "time" : {
          "start" : 1627251333504,
          "stop" : 1627251352505,
          "duration" : 19001
        }
      }, {
        "uid" : "3ea8fa801798c3a",
        "reportUrl" : "https://sirokeszter.github.io/conduit/16//#testresult/3ea8fa801798c3a",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=91.0.4472.164)",
        "time" : {
          "start" : 1627250929855,
          "stop" : 1627250958599,
          "duration" : 28744
        }
      }, {
        "uid" : "b2943e35ef917f1",
        "reportUrl" : "https://sirokeszter.github.io/conduit/15//#testresult/b2943e35ef917f1",
        "status" : "passed",
        "time" : {
          "start" : 1627250290814,
          "stop" : 1627250328209,
          "duration" : 37395
        }
      }, {
        "uid" : "e8ca8cd683103a3",
        "reportUrl" : "https://sirokeszter.github.io/conduit/12//#testresult/e8ca8cd683103a3",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"#/login\" class=\"nav-link router-link-exact-active active\" aria-current=\"page\">...</a> is not clickable at point (637, 26). Other element would receive the click: <div class=\"swal-overlay swal-overlay--show-modal\" tabindex=\"-1\">...</div>\n  (Session info: headless chrome=91.0.4472.164)",
        "time" : {
          "start" : 1627249843860,
          "stop" : 1627249862800,
          "duration" : 18940
        }
      }, {
        "uid" : "e8be2e1471e5e6cc",
        "reportUrl" : "https://sirokeszter.github.io/conduit/14//#testresult/e8be2e1471e5e6cc",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"#/login\" class=\"nav-link router-link-exact-active active\" aria-current=\"page\">...</a> is not clickable at point (637, 26). Other element would receive the click: <div class=\"swal-overlay swal-overlay--show-modal\" tabindex=\"-1\">...</div>\n  (Session info: headless chrome=91.0.4472.164)",
        "time" : {
          "start" : 1627249345821,
          "stop" : 1627249364773,
          "duration" : 18952
        }
      }, {
        "uid" : "6826152b2f87fee9",
        "reportUrl" : "https://sirokeszter.github.io/conduit/13//#testresult/6826152b2f87fee9",
        "status" : "passed",
        "time" : {
          "start" : 1627248692347,
          "stop" : 1627248730110,
          "duration" : 37763
        }
      }, {
        "uid" : "6bd863a5bad8a24e",
        "reportUrl" : "https://sirokeszter.github.io/conduit/14//#testresult/6bd863a5bad8a24e",
        "status" : "passed",
        "time" : {
          "start" : 1627248653568,
          "stop" : 1627248691037,
          "duration" : 37469
        }
      }, {
        "uid" : "165083b9fff7494f",
        "reportUrl" : "https://sirokeszter.github.io/conduit/13//#testresult/165083b9fff7494f",
        "status" : "passed",
        "time" : {
          "start" : 1627247738306,
          "stop" : 1627247775863,
          "duration" : 37557
        }
      }, {
        "uid" : "bf69b5eebe2f612a",
        "reportUrl" : "https://sirokeszter.github.io/conduit/12//#testresult/bf69b5eebe2f612a",
        "status" : "passed",
        "time" : {
          "start" : 1627246974649,
          "stop" : 1627247012135,
          "duration" : 37486
        }
      }, {
        "uid" : "60b800a3d57e7753",
        "reportUrl" : "https://sirokeszter.github.io/conduit/11//#testresult/60b800a3d57e7753",
        "status" : "passed",
        "time" : {
          "start" : 1627245970548,
          "stop" : 1627246008018,
          "duration" : 37470
        }
      }, {
        "uid" : "96f25b7279801c89",
        "reportUrl" : "https://sirokeszter.github.io/conduit/10//#testresult/96f25b7279801c89",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"#/login\" class=\"nav-link router-link-exact-active active\" aria-current=\"page\">...</a> is not clickable at point (637, 26). Other element would receive the click: <div class=\"swal-overlay swal-overlay--show-modal\" tabindex=\"-1\">...</div>\n  (Session info: headless chrome=91.0.4472.164)",
        "time" : {
          "start" : 1627245097107,
          "stop" : 1627245116102,
          "duration" : 18995
        }
      }, {
        "uid" : "16f38afab11e7d28",
        "reportUrl" : "https://sirokeszter.github.io/conduit/9//#testresult/16f38afab11e7d28",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id=\"app\"]/nav/div/ul/li[2]/a\"}\n  (Session info: headless chrome=91.0.4472.164)",
        "time" : {
          "start" : 1627243223247,
          "stop" : 1627243228915,
          "duration" : 5668
        }
      }, {
        "uid" : "f595bc658d598c2b",
        "reportUrl" : "https://sirokeszter.github.io/conduit/8//#testresult/f595bc658d598c2b",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id=\"app\"]/nav/div/ul/li[2]/a\"}\n  (Session info: headless chrome=91.0.4472.164)",
        "time" : {
          "start" : 1627242164735,
          "stop" : 1627242170346,
          "duration" : 5611
        }
      }, {
        "uid" : "81bf7a97fb88fd3f",
        "reportUrl" : "https://sirokeszter.github.io/conduit/7//#testresult/81bf7a97fb88fd3f",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id=\"app\"]/nav/div/ul/li[2]/a\"}\n  (Session info: headless chrome=91.0.4472.164)",
        "time" : {
          "start" : 1627241021834,
          "stop" : 1627241025444,
          "duration" : 3610
        }
      }, {
        "uid" : "5a29b39c6528a3d7",
        "reportUrl" : "https://sirokeszter.github.io/conduit/6//#testresult/5a29b39c6528a3d7",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id=\"app\"]/nav/div/ul/li[2]/a\"}\n  (Session info: headless chrome=91.0.4472.164)",
        "time" : {
          "start" : 1627240517344,
          "stop" : 1627240518957,
          "duration" : 1613
        }
      }, {
        "uid" : "1399191cdc119203",
        "reportUrl" : "https://sirokeszter.github.io/conduit/6//#testresult/1399191cdc119203",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id=\"app\"]/nav/div/ul/li[2]/a\"}\n  (Session info: headless chrome=91.0.4472.164)",
        "time" : {
          "start" : 1627237397833,
          "stop" : 1627237399444,
          "duration" : 1611
        }
      }, {
        "uid" : "5d389b20deabe6bb",
        "reportUrl" : "https://sirokeszter.github.io/conduit/5//#testresult/5d389b20deabe6bb",
        "status" : "broken",
        "statusDetails" : "ModuleNotFoundError: No module named 'webdriver_manager'",
        "time" : {
          "start" : 1627234544033,
          "stop" : 1627234544034,
          "duration" : 1
        }
      }, {
        "uid" : "b1efbffda50efbfb",
        "reportUrl" : "https://sirokeszter.github.io/conduit/4//#testresult/b1efbffda50efbfb",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id=\"app\"]/nav/div/ul/li[2]/a\"}\n  (Session info: headless chrome=91.0.4472.164)",
        "time" : {
          "start" : 1627234061719,
          "stop" : 1627234063604,
          "duration" : 1885
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "7ae6480eeecb2a2c.json",
  "parameterValues" : [ ]
}